import logging
import sqlite3
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# Підключення до БД
conn = sqlite3.connect("restaurant.db", check_same_thread=False)
cursor = conn.cursor()

# Створення таблиць
cursor.execute('''CREATE TABLE IF NOT EXISTS menu (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    category TEXT NOT NULL,
    name TEXT NOT NULL,
    price INTEGER NOT NULL
)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    item_name TEXT NOT NULL,
    status TEXT DEFAULT 'Очікує'
)''')
conn.commit()

ADMIN_CHAT_ID = 123456789  # <-- Вкажи свій chat_id адміністратора

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Отримати категорії
def get_categories():
    cursor.execute("SELECT DISTINCT category FROM menu")
    return [row[0] for row in cursor.fetchall()]

# Отримати товари за категорією
def get_items_by_category(category):
    cursor.execute("SELECT name, price FROM menu WHERE category = ?", (category,))
    return cursor.fetchall()

# Клавіатура категорій
def menu_keyboard():
    buttons = [[InlineKeyboardButton(cat, callback_data=f"category:{cat}")] for cat in get_categories()]
    return InlineKeyboardMarkup(buttons)

# Клавіатура товарів із кнопками "Назад" і "Завершити замовлення"
def items_keyboard_with_done(category):
    items = get_items_by_category(category)
    buttons = [[InlineKeyboardButton(f"{name} - {price} грн", callback_data=f"item:{name}")] for name, price in items]
    buttons.append([InlineKeyboardButton("Назад", callback_data="back")])
    buttons.append([InlineKeyboardButton("Завершити замовлення", callback_data="done")])
    return InlineKeyboardMarkup(buttons)

# /start — початок
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    print("[DEBUG] chat_id:", update.effective_chat.id)
    if not get_categories():
        await update.message.reply_text("Меню порожнє. Адмін, додайте товари командою /add")
        return
    await update.message.reply_text("Ласкаво просимо! Оберіть категорію:", reply_markup=menu_keyboard())

# Обробка натискань кнопок
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("category:"):
        category = query.data.split(":", 1)[1]
        context.user_data['category'] = category
        await query.edit_message_text(
            f"Оберіть товар із категорії \"{category}\":",
            reply_markup=items_keyboard_with_done(category)
        )
    elif query.data.startswith("item:"):
        item_name = query.data.split(":", 1)[1]
        user = query.from_user
        cursor.execute("INSERT INTO orders (user_id, item_name) VALUES (?, ?)", (user.id, item_name))
        conn.commit()
        await query.answer(f"Додано '{item_name}' до замовлення!", show_alert=False)
    elif query.data == "back":
        await query.edit_message_text("Оберіть категорію:", reply_markup=menu_keyboard())
    elif query.data == "done":
        user = query.from_user
        cursor.execute("SELECT item_name FROM orders WHERE user_id = ? AND status = 'Очікує'", (user.id,))
        items = [row[0] for row in cursor.fetchall()]
        if not items:
            await query.edit_message_text("Ваше замовлення порожнє :(")
            return
        summary = f"Замовлення від {user.full_name} (@{user.username}):\n"
        summary += "\n".join(f"- {item}" for item in items)
        await query.edit_message_text("Дякуємо за замовлення! Ми зв'яжемося з вами.")
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=summary)
        cursor.execute("UPDATE orders SET status = 'Надіслано' WHERE user_id = ? AND status = 'Очікує'", (user.id,))
        conn.commit()

# /add <категорія> <назва> <ціна> — додати товар (тільки адмін)
async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    try:
        category, name, price = context.args[0], context.args[1], int(context.args[2])
        cursor.execute("INSERT INTO menu (category, name, price) VALUES (?, ?, ?)", (category, name, price))
        conn.commit()
        await update.message.reply_text("Товар додано!")
    except Exception:
        await update.message.reply_text("Синтаксис: /add <категорія> <назва> <ціна>")

# /remove <назва> — видалити товар (тільки адмін)
async def remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    try:
        name = context.args[0]
        cursor.execute("DELETE FROM menu WHERE name = ?", (name,))
        conn.commit()
        await update.message.reply_text(f"Товар '{name}' видалено з меню.")
    except Exception:
        await update.message.reply_text("Синтаксис: /remove <назва_товару>")

# /edit <назва> <нова_ціна> — змінити ціну товару (тільки адмін)
async def edit_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    try:
        name = context.args[0]
        new_price = int(context.args[1])
        cursor.execute("UPDATE menu SET price = ? WHERE name = ?", (new_price, name))
        if cursor.rowcount == 0:
            await update.message.reply_text(f"Товар '{name}' не знайдено.")
        else:
            conn.commit()
            await update.message.reply_text(f"Ціна товару '{name}' оновлена до {new_price} грн.")
    except (IndexError, ValueError):
        await update.message.reply_text("Синтаксис: /edit <назва> <нова_ціна>")

# /orders — переглянути останні 20 замовлень (тільки адмін)
async def view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    cursor.execute("SELECT user_id, item_name, status FROM orders ORDER BY id DESC LIMIT 20")
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("Немає замовлень.")
        return
    message = "Останні замовлення:\n"
    for row in rows:
        message += f"Користувач {row[0]}: {row[1]} ({row[2]})\n"
    await update.message.reply_text(message)

# Запуск бота
if __name__ == '__main__':
    TOKEN = "YOUR_BOT_TOKEN"  # Встав свій токен

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_item))
    app.add_handler(CommandHandler("remove", remove_item))
    app.add_handler(CommandHandler("edit", edit_item))
    app.add_handler(CommandHandler("orders", view_orders))
    app.add_handler(CallbackQueryHandler(handle_callback))

    print("Бот запущено...")
    app.run_polling()
